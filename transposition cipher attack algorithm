import numpy as np
#———————————————————————————————probability and plaintext generator—————————————————————————————————————————#

# conditinal probability generator
def conditional_probability_generator(letter_list):
    letter_num = len(letter_list)
    result = []
    for i in range(letter_num):
        random_prob = np.random.randint(1,10,size = letter_num)
        normalise_prob = (random_prob/sum(random_prob)).tolist()
        result.append(normalise_prob)
    return result

# plaintext_generator
def plaintext_generator(letter_list,condition_prob_original, text_length):
    letter_list_initial = letter_list.copy()
    for i in range(text_length - len(letter_list)):
        last_letter = letter_list[-1]
        index = letter_list.index(last_letter)
        new_letter = np.random.choice(letter_list_initial, p = condition_prob_original[index])
        letter_list.append(new_letter)
    return letter_list

def conditional_prob(list_text,letter_list = ["a","b","c","d"]):
    result_all = []
    for i in range(len(letter_list)):
        letter = letter_list[i]
        result = []
        num_x_a = 0
        num_x_b = 0
        num_x_c = 0
        num_x_d = 0
        # compute number
        for i in range(len(list_text)):
            if i == len(list_text)-1:
                break
            elif list_text[i] == letter:
                if list_text[i+1] == "a":
                    num_x_a += 1
                if list_text[i+1] == "b":
                    num_x_b += 1   
                if list_text[i+1] == "c":
                    num_x_c += 1
                if list_text[i+1] == "d":
                    num_x_d += 1
                
        # compute conditional probability
        sum_all = num_x_a + num_x_b + num_x_c + num_x_d
        prob_x_a = num_x_a/sum_all
        prob_x_b = num_x_b/sum_all
        prob_x_c = num_x_c/sum_all
        prob_x_d = num_x_d/sum_all
        # output result
        result.append(prob_x_a)
        result.append(prob_x_b)
        result.append(prob_x_c)
        result.append(prob_x_d)
        result_all.append(result)
    return result_all
#———————————————————————————————encrypt and decrypt function—————————————————————————————————————————#
# transposition column encrypt function
def transposition_cipher_column_encrypt(plaintext,key,letter_list):
    # Complement text
    while len(plaintext)%len(key) != 0:
        add_letter = np.random.choice(letter_list)
        plaintext.append(add_letter)
    
    # encrypt process
    column_len = len(key)
    row_len = len(plaintext)//column_len
    plaintext_reshape = np.array(plaintext).reshape(row_len,column_len)
    ciphertext = plaintext_reshape[:,key[0]].tolist()
    for i in range(len(key)-1):
        new_ciphertext = plaintext_reshape[:,key[i+1]].tolist()
        ciphertext += new_ciphertext
    return ciphertext
    
# decrypt funciton
def transposition_cipher_column_decrypt(ciphertext,key):
    row_len = len(key)
    column_len = len(ciphertext)//row_len
    ciphertext_reshape = np.array(ciphertext).reshape(row_len,column_len).T
    decrypt_array = ciphertext_reshape[:,key.index(0)]
    for i in range(row_len-1):
        add_array = ciphertext_reshape[:,key.index(i+1)]
        decrypt_array = np.vstack((decrypt_array,add_array))
    plaintext = sum(decrypt_array.T.tolist(),[])
    return plaintext
    
#———————————————————————————————cost fucntion and grover's algorithm—————————————————————————————————————————#
def compute_cost(ciphertext,key,condition_prob_original):
    plaintext = transposition_cipher_column_decrypt(ciphertext,key = key)
    condition_prob = conditional_prob(plaintext,letter_list = ["a","b","c","d"])
    condition_cost = abs(np.array(condition_prob) - np.array(condition_prob_original)).sum()
    #joint_cost = -compute_likelihood(plaintext,condition_prob_original)
    #result = condition_cost + 0.0002*joint_cost
    return condition_cost

def grover_algorithm(qubit_state, target_qubit_1, target_qubit_2):
    # convert sign
    qubit_state[target_qubit_1] = -qubit_state[target_qubit_1]
    qubit_state[target_qubit_2] = -qubit_state[target_qubit_2]
    # average amplitude
    sum_all = 1/len(qubit_state)*(sum(qubit_state))
    #amplification
    result = 2*sum_all - qubit_state
    return abs(result)
    
#———————————————————————————————main function—————————————————————————————————————————#
def main_f(text_lenght, condition_prob_original, key = [],letter_list = ["a","b","c","d"]):
    if len(key) == 0:
        correct_key = np.random.choice(range(4),4,replace = False).tolist()
    else:
        correct_key = key
    # generate plaintext
    plaintext = plaintext_generator(letter_list, condition_prob_original, text_lenght)
    ciphertext = transposition_cipher_column_encrypt(plaintext,key = correct_key,letter_list = letter_list)

    # create initial state
    H = ((1/2)**0.5) * np.matrix([[1,1],[1,-1]])
    _0 = np.matrix([[1],[0]])
    initial_qubit = np.kron(np.kron(np.kron(H,H),H),H)*np.kron(np.kron(np.kron(_0,_0),_0),_0)

    # initial cost
    random_initial_key = np.random.choice(range(4),4,replace = False).tolist()
    initial_cost = compute_cost(ciphertext,random_initial_key,condition_prob_original)
    current_key = random_initial_key
    last_cost = initial_cost
    
    # [0] <> [1] Try to exchange the first and second positions
    current_key[0],current_key[1] = current_key[1],current_key[0]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[1] + 4
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    else:
        current_key[0],current_key[1] = current_key[1],current_key[0]
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[1] + 4
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    last_cost = current_cost
    
    # [2] <> [3] Try to exchange the third and fourth positions
    current_key[2],current_key[3] = current_key[3],current_key[2]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[2] + 4*2
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    elif current_cost > last_cost:
        current_key[2],current_key[3] = current_key[3],current_key[2]
        target_qubit_1 = current_key[2] + 4*2
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    last_cost = current_cost

    # [0] <> [3] Try to exchange the first and fourth positions
    current_key[0],current_key[3] = current_key[3],current_key[0]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    elif current_cost > last_cost:
        current_key[0],current_key[3] = current_key[3],current_key[0]
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    last_cost = current_cost
    
    # [1] <> [2] Try to exchange the second and third positions
    current_key[1],current_key[2] = current_key[2],current_key[1]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[1] + 4
        target_qubit_2 = current_key[2] + 4*2
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    elif current_cost > last_cost:
        current_key[1],current_key[2] = current_key[2],current_key[1]
        target_qubit_1 = current_key[1] + 4
        target_qubit_2 = current_key[2] + 4*2
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    last_cost = current_cost

    # [0] <> [2] Try to exchange the first and third positions
    current_key[0],current_key[2] = current_key[2],current_key[0]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[2] + 4*2
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    elif current_cost > last_cost:
        current_key[0],current_key[2] = current_key[2],current_key[0]
        target_qubit_1 = current_key[0]
        target_qubit_2 = current_key[2] + 4*2
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    last_cost = current_cost

    # [1] <> [3] Try to exchange the first and second positions
    current_key[1],current_key[3] = current_key[3],current_key[1]
    current_cost = compute_cost(ciphertext,current_key,condition_prob_original)
    if current_cost < last_cost:
        target_qubit_1 = current_key[1] + 4*1
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
    elif current_cost > last_cost:
        current_key[1],current_key[3] = current_key[3],current_key[1]
        target_qubit_1 = current_key[1] + 4*1
        target_qubit_2 = current_key[3] + 4*3
        initial_qubit = grover_algorithm(initial_qubit, target_qubit_1, target_qubit_2)
        current_cost = last_cost
    return initial_qubit,correct_key

#———————————————————————————————measurement function—————————————————————————————————————————#
# measure final qubit state

# 1-qubit
_0 = np.matrix([[1],[0]])
_1 = np.matrix([[0],[1]])

# 2-qubit
_00 = np.kron(_0,_0)
_01 = np.kron(_0,_1)
_10 = np.kron(_1,_0)
_11 = np.kron(_1,_1)

# 3-qubit
_000 = np.kron(_00,_0)
_001 = np.kron(_00,_1) 
_010 = np.kron(_01,_0)
_011 = np.kron(_01,_1)
_100 = np.kron(_10,_0)
_101 = np.kron(_10,_1)
_110 = np.kron(_11,_0)
_111 = np.kron(_11,_1)

# 4-qubit
_0000 = np.kron(_000,_0)
_0001 = np.kron(_000,_1)
_0010 = np.kron(_001,_0)
_0011 = np.kron(_001,_1)

_0100 = np.kron(_010,_0)
_0101 = np.kron(_010,_1)
_0110 = np.kron(_011,_0)
_0111 = np.kron(_011,_1)

_1000 = np.kron(_100,_0)
_1001 = np.kron(_100,_1)
_1010 = np.kron(_101,_0)
_1011 = np.kron(_101,_1)

_1100 = np.kron(_110,_0)
_1101 = np.kron(_110,_1)
_1110 = np.kron(_111,_0)
_1111 = np.kron(_111,_1)

# measure basis
M_list = []
M0000 = _0000*_0000.T
M0001 = _0001*_0001.T
M0010 = _0010*_0010.T
M0011 = _0011*_0011.T

M0100 = _0100*_0100.T
M0101 = _0101*_0101.T
M0110 = _0110*_0110.T
M0111 = _0111*_0111.T

M1000 = _1000*_1000.T
M1001 = _1001*_1001.T
M1010 = _1010*_1010.T
M1011 = _1011*_1011.T

M1100 = _1100*_1100.T
M1101 = _1101*_1101.T
M1110 = _1110*_1110.T
M1111 = _1111*_1111.T

M_list.append(M0000)
M_list.append(M0001)
M_list.append(M0010)
M_list.append(M0011)

M_list.append(M0100)
M_list.append(M0101)
M_list.append(M0110)
M_list.append(M0111)

M_list.append(M1000)
M_list.append(M1001)
M_list.append(M1010)
M_list.append(M1011)

M_list.append(M1100)
M_list.append(M1101)
M_list.append(M1110)
M_list.append(M1111)

def measurement(qubit,M_basis):
    prob = qubit.T*M_basis*qubit
    qubit_after = (M_basis*qubit)/np.sqrt(prob)
    return prob

def measurement_final_key(qubit,M_list):
    result_list = []
    for i in range(len(M_list)):
        prob = measurement(qubit,M_list[i]).tolist()
        prob = prob[0][0]
        result_list.append(prob)
    return result_list

def find_max_index(input_list):
    input_set = set(input_list)
    result = []
    if len(input_set) == len(input_list):
        max_index = input_list.index(max(input_list))
        result.append(max_index)
    else:
        max_value = max(input_list)
        for i in range(len(input_list)):
            if input_list[i] == max_value:
                result.append(i)
    return result

def output_prob_key(measure_result):
    key_list = []
    key_1_list = find_max_index(measure_result[0:4])
    key_2_list = find_max_index(measure_result[4:8])
    key_3_list = find_max_index(measure_result[8:12])
    key_4_list = find_max_index(measure_result[12:16])

    key_list.append(key_1_list)
    key_list.append(key_2_list)
    key_list.append(key_3_list)
    key_list.append(key_4_list)
    return key_list

def get_key(qubit,M_list):
    prob_all = measurement_final_key(qubit,M_list)
    result = output_prob_key(prob_all)
    return result
    
#———————————————————————————————compute accuracy function—————————————————————————————————————————#
def compute_accuracy(correct_key,guess_key):
    accuracy = 0
    for i in range(len(guess_key)):
        if len(guess_key[i]) == 1:
            if correct_key[i] == guess_key[i][0]:
                accuracy += 1 
        else:
            if correct_key[i] in guess_key[i]:
                accuracy += 1
    return accuracy/4

def compute_whole_accuracy(result,give_rate):
    num = 0
    for i in range(len(result)):
        if result[i] >= give_rate:
            num += 1
    return num/len(result)
    
#———————————————————————————————test result—————————————————————————————————————————#
# same key
same_key_result = []
for i in range(100):
    output_qubit,correct_key = main_f(200, condition_prob_original, key = [3,1,2,0],letter_list = ["a","b","c","d"])
    guess_key = get_key(output_qubit,M_list)
    accuracy = compute_accuracy(correct_key,guess_key)
    same_key_result.append(accuracy)
compute_whole_accuracy(same_key_result,give_rate = 0.5)

# random key
random_key_result = []
for i in range(100):
    output_qubit,correct_key = main_f(200, condition_prob_original,letter_list = ["a","b","c","d"])
    guess_key = get_key(output_qubit,M_list)
    accuracy = compute_accuracy(correct_key,guess_key)
    random_key_result.append(accuracy)
compute_whole_accuracy(random_key_result,give_rate = 0.5)
